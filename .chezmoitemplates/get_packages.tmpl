{{- /* TODO (Chris): Let taps be included inside packages? */ -}}
{{- /* TODO (Chris): Make sure when adding scoops, we get all the metadata.  Make sure to fix inside `packages.yaml` too! */ -}}
{{- $packagesData := get . "packageManagement" | default dict -}}
{{- $toInstall := get . "packagesToInstall" | default dict -}}
{{- $currentOS := .osid | default .chezmoi.os -}}
{{- $isUnixLike := .isUnixLike | default false -}}
{{- $ctx := dict -}}

{{- /* Internal use variables */ -}}
{{- $profiles := dict -}}
{{- $groups := dict -}}
{{- $groupsToAdd := list -}}
{{- $packages := dict -}}
{{- $packagesToAdd := list -}}
{{- $repos := dict -}}
{{- $managerRepoTypes := list -}}

{{- $errors := dict -}}

{{- /* Get the default installer, fall back `packages.yaml` definition. */ -}}
{{- /* TODO: Decide if I want to redo this */ -}}
{{- $defaultInstaller := get $packagesData.defaultManagers $currentOS | default "NOTSET" -}}
{{- if hasKey $toInstall "defaultInstaller" -}}
  {{- $defaultInstaller = $toInstall.defaultInstaller -}}
{{- end -}}

{{- if eq $currentOS "windows" -}}
  {{- $managerRepoTypes = append $managerRepoTypes "buckets" -}}
{{- end -}}
{{- if $isUnixLike -}}
  {{- $managerRepoTypes = append $managerRepoTypes "taps" -}}
  {{- $managerRepoTypes = append $managerRepoTypes "buckets" -}}
{{- end -}}

{{- /* Get all of the profiles to install. */ -}}
{{- range $profileName := $toInstall.profiles | default dict -}}
  {{- /* If the profile name doesn't exist, add it to the errors and continue */ -}}
  {{- if or (not (hasKey $packagesData "profiles"))
            (not (hasKey $packagesData.profiles $profileName)) -}}
    {{- $_ := set $errors "profiles" (append (get $errors "profiles" | default list) $profileName) -}}
    {{- continue -}}
  {{- end -}}
  {{- /* Otherwise, get the profile metadata and add it to our main list */ -}}
  {{- $profile := index $packagesData.profiles $profileName -}}
  {{- $_ := set $profiles $profileName $profile -}}
{{- end -}}
{{- /* No need to dedupe! */ -}}

{{- $managerRepoData := dict 
      "profiles" $profiles
      "repoTypes" $managerRepoTypes
  -}}
{{- $reposRaw := includeTemplate "get_manager_repo_data.tmpl" $managerRepoData -}}
{{- $repos = $reposRaw | fromYaml -}}

{{- /* Collect all the group data */ -}}
{{- $groupData := dict 
      "packagesData" $packagesData
      "toInstall" $toInstall
      "profiles" $profiles
  -}}
{{- $groupsRaw := includeTemplate "get_group_data.tmpl" $groupData -}}
{{- $groups = $groupsRaw | fromYaml -}}

{{- /* Get all the packages from all the groups */ -}}
{{- $packagesTemplateData := dict 
    "packagesData" $packagesData 
    "groups" $groups.groupsToInstall
    "toInstall" $toInstall
    "currentOS" $currentOS 
    "isUnixLike" $isUnixLike 
    "defaultInstaller" $defaultInstaller
  -}}
{{- $packagesRaw := includeTemplate "get_package_data.tmpl" $packagesTemplateData -}}
{{- $packages = $packagesRaw | fromYaml -}}

{{- /* Clean up the error handling */ -}}
{{- if hasKey $groups "errors" -}}
  {{- $_ := set $errors "groups" $groups.errors -}}
{{- end -}}
{{- if hasKey $packages "errors" -}}
  {{- $_ := set $errors "packages" $packages.errors -}}
{{- end -}}

{{- if gt (len (keys $errors)) 0 -}}
  {{- $_ := set $ctx "errors" $errors -}}
{{- end -}}

{{- if gt (len (keys $repos)) 0 -}}
  {{- $_ := set $ctx "reposToInstall" $repos -}}
{{- end -}}

{{- $_ := set $ctx "packagesToInstall" $packages.packagesToInstall -}}
{{- toYaml $ctx -}}
